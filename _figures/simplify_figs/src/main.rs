use kurbo::{CubicBez, ParamCurve, ParamCurveArclen, ParamCurveDeriv, Point, Shape, Vec2};
use kurbo::common::solve_cubic;

fn intersect(c: CubicBez, p: Point, tangent: Vec2) -> Vec<f64> {
    let p1 = 3.0 * (c.p1 - c.p0);
    let p2 = 3.0 * c.p2.to_vec2() - 6.0 * c.p1.to_vec2() + 3.0 * c.p0.to_vec2();
    let p3 = (c.p3 - c.p0) - 3.0 * (c.p2 - c.p1);
    let c0 = (c.p0 - p).dot(tangent);
    let c1 = p1.dot(tangent);
    let c2 = p2.dot(tangent);
    let c3 = p3.dot(tangent);
    solve_cubic(c0, c1, c2, c3)
        .into_iter()
        .filter(|t| (0.0..=1.0).contains(t))
        .collect()
}


fn main() {
    let fig = std::env::args().skip(1).next().expect("need figure type");
    let c1 = CubicBez::new((10., 150.), (300., 150.), (310., 150.), (310., 450.));
    let a: f64 = if fig == "arc2" { 40. } else { 400. };
    let c2 = CubicBez::new((10., 150.), (300. + a, 150.), (310., 150. - a), (310., 450.));
    let arclen = c1.arclen(1e-9);
    let arclen2 = c2.arclen(1e-9);
    println!("<svg width='450' height='480' xmlns='http://www.w3.org/2000/svg'>");
    println!("  <!-- figure generated by simplify_figs program in _figures subdir -->");
    println!("  <path d='{}' stroke='#000' fill='none'/>", c1.into_path(1e-9).to_svg());
    println!("  <path d='{}' stroke='#000' fill='none'/>", c2.into_path(1e-9).to_svg());
    const N: usize = 11;
    for i in 1..N {
        let s = (i as f64 / N as f64) * arclen;
        let t = c1.inv_arclen(s, 1e-9);
        let p = c1.eval(t);
        println!("  <circle cx='{}' cy='{}' r='2' fill='#008'/>", p.x, p.y);
        let t2;
        if fig == "th" {
            let d = c1.deriv().eval(t);
            let t2s = intersect(c2, p, d.to_vec2());
            t2 = t2s[0];
        } else {
            let s2 = (i as f64 / N as f64) * arclen2;
            t2 = c2.inv_arclen(s2, 1e-9);
        }
        let p2 = c2.eval(t2);
        if fig != "th" {
            println!("  <circle cx='{}' cy='{}' r='2' fill='#008'/>", p2.x, p2.y);
        }
        println!("  <line x1='{}' y1='{}' x2='{}' y2='{}' stroke='#000'/>",
            p.x, p.y, p2.x, p2.y);
    }
    println!("</svg>");
}
